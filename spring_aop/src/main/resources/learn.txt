Bean 标签基本配置
用于配置对象交由Spring 来创建
默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功。
基本属性：
id：
class：

bean实例化的三种方式
无参构造方法:
工厂静态方法:
工厂实例方法实例化:

<Bean的依赖注入概念>
依赖注入（Dependency Injection）：它是Spring框架核心IOC的具体实现。
在编写程序时，通过控制反转，把对象的创建交给了Spring，但是代码中不可能出现没有依赖的情况。IOC解耦只是降低了他们的依赖关系，
但是不会消除，例如：业务层仍会调用持久层的方法。
那这种业务层和持久层的依赖关系，在使用Spring之后，就让Spring来维护了。
怎么将UserDao注入到UserService内部呢？
1）构造方法
2）set方法
实际开发中，Spring的配置内容过多，导师配置很繁杂且体积很大，所以，可以将这部分配置拆解到其他配置文件中，而在Spring主配置
文件通过import标签进行加载
<import resource="applicationContext-xxx.xml"/>

applicationContext.xml加载jdbc.properties配置文件获得连结信息

首先，需要引入context命名空间和约束路径

<context: property-placeholder location="xxx.properties"/>
<property name="xxxxx" value="${key}"></property>


Spring原始注解主要替代<Bean>的配置
@Component            使用在类上用于实例化Bean
@Controller           使用在web层类上用于实例化Bean
@Service
@Repository
@Autowired
@Qualifier
@Resource
@Value
@Scope
@PostConstruct
@PreDestroy


 //        <property name="userDao" ref="userDao"></property>
    @Autowired   //按照数据类型从Spring容器中进行匹配的
    //@Qualifier("userDao") //是按照id值从容器中进行匹配的，但是主要此处的@Qualifier 结合@Autowired一起使用
    @Resource(name = "userDao") //@Resource相当于@Autowired+@Quilfier
    UserDao userDao;


    AOP的作用及其优势
    作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强
    优势：减少重复代码，提高开发效率，并且便于维护

    切点表达式语法：
    execution([修饰符]返回值类型 包名.类名.方法名(参数))
    访问修饰符可以省略
    返回值类型、包名、类名、方法名可以使用星号*代表任意
    包名与类名之间一个点..表示当前包下类，两个点..表示当前包及其子包下的类
    参数列表可以使用两个点..表示任意个数，任意类型的参数列表

    aop织入配置
    <aop:config>
    <aop:aspect ref="切面类">
    <aop:before method="通知方法名称" pointcut="切点表达式"></aop:before>
    </aop:aspect>
    </aop:config>
通知的类型：前置通知，后置通知，环绕通知，异常抛出通知，最终通知
切点表达式：execution([修饰符]返回值类型 包名.类名.方法名(参数))
基于注解的aop开发步骤
（1）创建目标接口和目标类（内部有切点）
（2）创建切面类（内部有增强方法）
（3）将目标类和切面类的对象创建权交给spring
（4）在切面类中使用注解配置织入关系
（5）在配置文件中开启组件扫描和AOP的自动代理
（6）测试
